package it.unibo.client.demo.panels

import java.awt.GridLayout
import java.sql.Timestamp
import java.text.SimpleDateFormat
import java.util.Date

import it.unibo.client.demo.{CDTController, SwingExecutionContext}
import it.unibo.core.data.{Data, Resource, Sensor}
import javax.swing.{DefaultListModel, JList, JPanel}
import monix.execution.Scheduler

class DashboardState(controller: CDTController, implicit val swingExecutionContext: SwingExecutionContext) extends JPanel {

  val scheduler = Scheduler(swingExecutionContext)

  // TODO: insted of list could be a table of categoryname, value, generated by, timestamp
  val dataListModel = new DefaultListModel[String]()
  val dataList = new JList[String](dataListModel)

  setLayout(new GridLayout(1, 1))
  add(dataList)

  controller.state.observeOn(scheduler).foreach { data =>
    println("Swing" + Thread.currentThread().getName) // TODO: remove it
    dataListModel.clear()
    data.map(toListFormat).foreach { dataListFormat =>
      dataListModel.addElement(dataListFormat)
    }
  }(scheduler)


  private def toListFormat(data: Data): String = {
    var valuePart = s"${data.category.name}: ${data.value}. "
    valuePart += s"Generated by " + (data.feeder match {
      case Resource(uri) => uri
      case Sensor(name) => name
    })
    valuePart += s" at ${timestampToDate(data.timestamp)}"
    valuePart
  }

  private val dateFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S")
  private def timestampToDate(timestamp: Long): String = {
    val time = new Timestamp(timestamp)
    dateFormatter.format(new Date(time.getTime))
  }
}
